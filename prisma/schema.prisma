// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations : one-to-many
  posts Post[]
  comments Comment[]
  // likes Like[]

  // followers Follows[] @relation("following") //users who follow this user
  // following Follows[] @relation("follower") //users this user follows

  // notifications Notification[] @relation("userNotifications") //notification recieved by a user
  // notificationsCreated Notification[] @relation("notificationCreator") //notifications triggered by a user
  
}

model Post{
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) //delete all posts if user deleted
  comments Comment[]
  // likes Like[]
  // notifications Notification[]
}

model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  //Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references : [id], onDelete: Cascade)

}